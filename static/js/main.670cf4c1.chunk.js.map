{"version":3,"sources":["components/TodoFilter/TodoFilter.jsx","components/Todo/Todo.jsx","components/TodoList/TodoList.jsx","components/Form/Form.jsx","App.js","helpers/useLocasStorage.js","index.js"],"names":["TodoFilter","setFilter","filter","filterHandler","filterBy","className","href","onClick","Todo","todo","todos","setTodos","removeHandler","useState","isDoubleClicked","setIsDoubleClicked","title","setTitle","inputQuery","setInputQuery","completeHandler","useCallback","id","newTodos","map","completed","submitHandler","event","key","blurHandler","target","currentTarget","type","checked","onChange","onDoubleClick","prev","value","onKeyPress","onBlur","TodoList","filterTodos","setFilterTodos","defaultProps","Form","titleValue","setTitleValue","preventDefault","Date","onSubmit","placeholder","App","toggleAll","setToggleAll","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useLocalStorage","localStorageTodos","useEffect","length","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.670cf4c1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoFilter = ({ setFilter, filter }) => {\n  const filterHandler = filterBy => (\n    setFilter(filterBy)\n  );\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={filter === 'all' ? 'selected' : ''}\n          onClick={() => filterHandler('all')}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={filter === 'active' ? 'selected' : ''}\n          onClick={() => filterHandler('active')}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={filter === 'completed' ? 'selected' : ''}\n          onClick={() => filterHandler('completed')}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n};\n\nTodoFilter.propTypes = {\n  setFilter: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n","import React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport className from 'classnames';\n\nexport const Todo = ({\n  todo,\n  todos,\n  setTodos,\n  removeHandler,\n}) => {\n  const [isDoubleClicked, setIsDoubleClicked] = useState(false);\n  const [title, setTitle] = useState(todo.title);\n  const [inputQuery, setInputQuery] = useState(title);\n\n  const completeHandler = useCallback(\n    (id) => {\n      const newTodos = todos.map(todo => (\n        todo.id === id ? ({\n          ...todo,\n          completed: !todo.completed,\n        })\n          : todo\n      ));\n\n      setTodos(newTodos);\n    }, [todos],\n  );\n\n  const editingHandler = () => {\n    setIsDoubleClicked(prev => !prev);\n  };\n\n  const changeHandler = (event) => {\n    setInputQuery(event.target.value);\n  };\n\n  const submitHandler = useCallback(\n    (event) => {\n      if (event.key === 'Esc') {\n        setIsDoubleClicked(false);\n        setInputQuery(title);\n\n        return;\n      }\n\n      if (event.key === 'Enter' && inputQuery) {\n        setTitle(inputQuery);\n        setIsDoubleClicked(false);\n      }\n    }, [title, inputQuery],\n  );\n\n  const blurHandler = useCallback(\n    (event) => {\n      const { target, currentTarget } = event;\n\n      if (inputQuery && currentTarget === target) {\n        setTitle(inputQuery);\n        setIsDoubleClicked(false);\n      }\n    }, [inputQuery],\n  );\n\n  return (\n    <li\n      className={className(\n        todo.completed ? 'completed' : '',\n        isDoubleClicked ? 'editing' : '',\n      )}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={() => completeHandler(todo.id)}\n        />\n        <label\n          onDoubleClick={() => editingHandler(todo.id)}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => removeHandler(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={inputQuery}\n        onChange={changeHandler}\n        onKeyPress={submitHandler}\n        onBlur={blurHandler}\n      />\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  setTodos: PropTypes.func.isRequired,\n  removeHandler: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Todo } from '../Todo';\n\nexport const TodoList = ({ todos, setTodos, filterTodos, setFilterTodos }) => {\n  const removeHandler = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  return (\n    <ul className=\"todo-list\">\n      {filterTodos.map(todo => (\n        <Todo\n          key={todo.id}\n          todo={todo}\n          todos={todos}\n          setTodos={setTodos}\n          filterTodos={filterTodos}\n          removeHandler={removeHandler}\n          setFilterTodos={setFilterTodos}\n        />\n      ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ),\n  setTodos: PropTypes.func.isRequired,\n  filterTodos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ),\n  setFilterTodos: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n  filterTodos: [],\n};\n","import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Form = ({ setTodos, todos }) => {\n  const [titleValue, setTitleValue] = useState('');\n\n  const changeHandler = event => (\n    setTitleValue(event.target.value)\n  );\n\n  const submitHandler = useCallback(\n    (event) => {\n      event.preventDefault();\n\n      if (!titleValue) {\n        return;\n      }\n\n      setTodos([\n        ...todos,\n        {\n          title: titleValue,\n          completed: false,\n          id: +new Date(),\n        },\n      ]);\n      setTitleValue('');\n    }, [titleValue],\n  );\n\n  return (\n    <form onSubmit={submitHandler}>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={titleValue}\n        onChange={changeHandler}\n      />\n    </form>\n  );\n};\n\nForm.propTypes = {\n  setTodos: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ),\n};\n\nForm.defaultProps = {\n  todos: [],\n};\n","import React, { useState, useCallback, useEffect } from 'react';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoList } from './components/TodoList';\nimport { Form } from './components/Form';\nimport { useLocalStorage } from './helpers/useLocasStorage';\n\nexport const App = () => {\n  const [todos, setTodos] = useState([]);\n  const [toggleAll, setToggleAll] = useState(true);\n  const [filter, setFilter] = useState('all');\n  const [filterTodos, setFilterTodos] = useLocalStorage('todos', todos);\n\n  const toggleHandler = () => {\n    setToggleAll(prev => !prev);\n    let newTodos = [];\n\n    if (toggleAll) {\n      newTodos = todos.map(todo => (\n        {\n          ...todo,\n          completed: true,\n        }\n      ));\n    }\n\n    if (!toggleAll) {\n      newTodos = todos.map(todo => (\n        {\n          ...todo,\n          completed: false,\n        }\n      ));\n    }\n\n    setTodos(newTodos);\n  };\n\n  const clearHandler = () => {\n    setTodos(prev => prev.filter(todo => !todo.completed));\n    setToggleAll(true);\n  };\n\n  const localStorageTodos = useCallback(\n    (type) => {\n      switch (type) {\n        case 'active':\n          setFilterTodos(todos.filter(todo => !todo.completed));\n          break;\n\n        case 'completed':\n          setFilterTodos(todos.filter(todo => todo.completed));\n          break;\n\n        case 'all':\n        default:\n          setFilterTodos(todos);\n      }\n    }, [todos],\n  );\n\n  useEffect(() => {\n    localStorageTodos(filter);\n  }, [todos, filter]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <Form\n          setTodos={setTodos}\n          todos={todos}\n        />\n      </header>\n\n      {todos.length > 0 && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              onChange={toggleHandler}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            <TodoList\n              todos={todos}\n              setTodos={setTodos}\n              filterTodos={filterTodos}\n              setFilterTodos={setFilterTodos}\n            />\n          </section>\n\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${todos.filter(todo => !todo.completed).length} items left`}\n            </span>\n\n            <TodoFilter\n              todos={todos}\n              setFilter={setFilter}\n              filter={filter}\n            />\n\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={() => clearHandler()}\n            >\n              Clear completed\n            </button>\n          </footer>\n        </>\n      )}\n    </section>\n  );\n};\n\nexport default App;\n","import { useState } from 'react';\n\nexport function useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      // eslint-disable-next-line no-console\n      console.log(error);\n\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore\n        = value instanceof Function ? value(storedValue) : value;\n      // Save state\n\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}